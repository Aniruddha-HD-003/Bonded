# Generated by Django 5.2.3 on 2025-07-07 05:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0002_remove_user_group_groupmembership'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('daily', 'Daily Challenge'), ('weekly', 'Weekly Challenge'), ('monthly', 'Monthly Challenge'), ('special', 'Special Event')], max_length=20)),
                ('category', models.CharField(choices=[('post', 'Posting'), ('event', 'Event Planning'), ('interaction', 'Social Interaction'), ('media', 'Media Sharing'), ('engagement', 'Engagement')], max_length=20)),
                ('target_count', models.IntegerField(default=1, help_text='Number of times to complete the challenge')),
                ('points_reward', models.IntegerField(default=10, help_text='Points awarded for completion')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='users.group')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('all_time', 'All Time')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='users.group')),
            ],
            options={
                'unique_together': {('group', 'period', 'start_date')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_count', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to='games.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('challenge', 'user')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('points', models.IntegerField(default=0)),
                ('rank', models.IntegerField(default=0)),
                ('posts_count', models.IntegerField(default=0)),
                ('events_count', models.IntegerField(default=0)),
                ('comments_count', models.IntegerField(default=0)),
                ('reactions_count', models.IntegerField(default=0)),
                ('challenges_completed', models.IntegerField(default=0)),
                ('streaks_maintained', models.IntegerField(default=0)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='games.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-points', '-rank'],
                'unique_together': {('leaderboard', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Streak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('streak_type', models.CharField(choices=[('post', 'Posting Streak'), ('event', 'Event Creation Streak'), ('comment', 'Commenting Streak'), ('reaction', 'Reaction Streak'), ('login', 'Login Streak')], max_length=20)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaks', to='users.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'group', 'streak_type')},
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.CharField(blank=True, help_text='Icon name or URL', max_length=200)),
                ('achievement_type', models.CharField(choices=[('badge', 'Badge'), ('milestone', 'Milestone'), ('role', 'Special Role'), ('group', 'Group Achievement')], default='badge', max_length=20)),
                ('criteria', models.JSONField(blank=True, help_text='Criteria for awarding (e.g., {"posts": 50})', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('is_group', models.BooleanField(default=False)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='games.achievement')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='users.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'achievement', 'group')},
            },
        ),
    ]
