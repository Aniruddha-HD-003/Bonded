name: Bonded CI/CD Pipeline

on:
  push:
    branches: [ group, production ]
  pull_request:
    branches: [ group, production ]

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
  CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
  CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
  REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

jobs:
  # Development/Group Branch Pipeline
  test-and-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/group'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bonded_test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Testing
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Run backend tests
        env:
          DJANGO_SECRET_KEY: test-secret-key
          DB_NAME: bonded_test_db
          DB_USER: test_user
          DB_PASSWORD: test_pass
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          cd backend
          source venv/bin/activate
          python manage.py migrate
          python manage.py test

      # Frontend Testing
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: Type check frontend
        run: |
          cd frontend
          npm run type-check

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Production Branch Pipeline
  production-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    needs: test-and-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Production Build
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install production backend dependencies
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements_production.txt

      - name: Run production backend checks
        run: |
          cd backend
          source venv/bin/activate
          python manage_production.py check --deploy

      # Frontend Production Build
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend for production
        run: |
          cd frontend
          npm run build:production

      # Deploy to Railway (Backend)
      - name: Deploy Backend to Railway
        if: env.RAILWAY_TOKEN != ''
        uses: railway/deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: backend

      # Deploy to Vercel (Frontend)
      - name: Deploy Frontend to Vercel
        if: env.VERCEL_TOKEN != ''
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend

  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Notifications
  notify-success:
    runs-on: ubuntu-latest
    if: success()
    needs: [test-and-build, production-deploy]

    steps:
      - name: Notify on success
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"

  notify-failure:
    runs-on: ubuntu-latest
    if: failure()
    needs: [test-and-build, production-deploy]

    steps:
      - name: Notify on failure
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}" 